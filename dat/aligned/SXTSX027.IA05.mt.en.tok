Today I would like to speak on the subject of a spoken dialog email tool that is based on incremental spoken language processing . In recent years , for many people such as the elderly or children who did not have many chances to use computers , for such people chances to use computers have increased .
In such cases , in addition to the input interfaces such as mouses or keyboards that we have had until now , more friendly interfaces have become desirable . So , this is the kind of situation that we have .
Regarding such a situation , research is progressing to use spoken language , such as I am now speaking , as an input method with regards to computers .
It is thought that spoken language , which is the method by which humans most commonly will convey their will to others , would be possible as a kind of operation to directly and easily communicate one’s will in the case of using and inputting with regards to computers .
With conventional spoken dialog systems that have been researched to date , it is common that once the speech of a person is finished , at that stage a response comes back from the system , and once the system has finished responding , the user again speaks. It has been firmly divided into this kind of order , a type of dialog that is something like walkie-talkies .
However , when you think of normal dialog between human beings , people do not necessarily wait until the other person has stopped talking , and might interrupt while the other person is still speaking , or might give feedback. It is while doing such things that a dialog takes place .
Therefore , when thinking of achieving an interface between computers and humans that is more friendly and easier to use , just like I said before , some kind of mechanism is required so that the computer can give a response even while the person is speaking .
Therefore , even in the middle of a speech the system gives a response. We call this incremental spoken language processing. Something like this is needed .
By achieving such a thing , and changing content in the middle of a speech , or reducing the waiting time for a response from the system , if a such a smooth dialog could be realized , it is thinkable that such things as stress and anxiety could be decreased , or the efficiency of work itself could be improved .
Following on from such thinking , we have come to develop sync email , something whose main job is to search email .
Sync email is based on the incremental spoken language processing that I mentioned before. At the point it has gathered the necessary information from the speech input , it does a search .
For example , if searching for an email from Kimura with “wedding” in the title , when the user talks about this , at the point that there is an input for “wedding” in the title , it has searched once to narrow down the emails .
In this case it performs an operation to search for emails with “wedding” in the title . Next , at the point that Kimura is input as the sender , it will next also search for any email that has Kimura in the sender category .
By steadily searching step-by-step , for example , while the user is still speaking , and because it is steadily narrowing down , it can find the desired email midway through , or if midway through the email search it brings up no results , in such a case it can immediately go back and try again. By such a thing becoming possible , it is thought that work efficiency could increase .
As for how it specifically returns the result midway through , to begin with searching is successfully combining two things - which category should be searched , and what within the category should be searched. Since this is how a search is configured , if it can determine this combination while someone is still talking , it becomes possible to do something like return a result even while the person is still speaking .
For example , with the previous example , searching for “wedding” in the title , and with Kimura as the sender , with regards to this kind of speech , at the point that the title is input , it first decides within what category this attribute should be searched , and that the attribute is the title .
Next , at the point that “wedding” is input , that value is entered , and it knows that it is wedding , so it can fill in the value of the category . And when the situation is such that the attribute and the value are both met , it can perform the search .
Also , for the second part about Kimura the sender , just like one and two , a similar thing can be performed for three and four , so that a search can be done midway through .
Because a conventional search would finally be performed with what was been entered so far , compared to this it can be processed at an earlier stage .
Therefore , it is thought that such things as stress can be reduced midway through . We actually performed evaluation experiments using this system , and in an experiment to evaluate work efficiency , we found that within a set period of time it was better to get a response midway to complete more things , and to improve work efficiency. Also , in a survey about the ease of use , the results showed that when rated with a five point rating system , a proposed system that would return results midway through received a high rating .
In conclusion , I would like to summarize . In this presentation I proposed a way for a system to give a response even if the user was still speaking . Also , the effectiveness of this method was confirmed through an evaluation experiment .
As a future issue , this raises the matter of being able to flexibly handle complex speech because of the various ways that humans speak , not just more simple speech . With this , my presentation is concluded .
